
I have UNF table 
    railway_booking 
        booking_id, booking_number, train_id, train_name, 
        passenger_id, passenger_name, passenger_city, 
        journey_date, from_station, to_station, 
        number_of_tickets, tickets_amount,
        ticket_plus_food_amount, payment_mode, 

        ticket1seat_number, ticket1_seat_price, 
        ticket2seat_number, ticket2_seat_price, 
        ticket3seat_number, ticket3_seat_price,
        
        food1_item_id, food1_item_name, food1_price, food1_qty, food1_amount,
        food2_item_id, food2_item_name, food2_price, food2_qty, food2_amount,
        food3_item_id, food3_item_name, food3_price, food1_qty, food3_amount,
        food4_item_id, food4_item_name, food4_price, food1_qty, food4_amount, 
I formed below NF tables.
        passenger: passenger_id, passenger_name, passenger_age
        train: train_id, train_name, route
        seat: seat_id, seat_number, class, seat_price
        food: item_id, item_name, price

        train_booking: booking_id, booking_number, 
            journey_date, train_id, passenger_id, number_of_tickets, 
            tickets_amount, food_amount, total_amount, payment_mode
            
        train_booking_food: booking_id, item_id, quantity, amount
        train_booking_seat: ticket_id, seat_id, price, booking_id  
        
My data is going to be.
        I am Maheswaran, and I have booked tickets for my family living in city Trichy. 
            journey_date: 2024-11-20, from_station: Trichy, to_station: Chennai, 
            train_name: express train, number_of_tickets: 3, 
            seat_numbers: [S1, S2, S3] each seat price is Rs.120.
            food ordered: [samosa @ Rs.60 x 2, pop corn @ Rs.100 x 3, coffee @ Rs.40 x 1, pups @ Rs.50 x 3]
        And 
        I have booked tickets for my family, sister’s family, and father.
            journey_date: 2024-11-21, from_station: Trichy, to_station: Madurai, 
            train_name: fast train, number_of_tickets: 7,
            seat_numbers: [A1, A2, A3, A4, A5, A6, A7] each seat price is Rs.180.
            food ordered: [samosa @ Rs.60 x 2, pop corn @ Rs.100 x 3, coffee @ Rs.40 x 1, pups @ Rs.50 x 3]

Now, I need the tables script in oracle with primary key, not null, and foreign keys.
And I need insert statements for the tables. 
And I need the data in tabular form for all NF tables.

=========================================================================
-- Train Reservation System

--Tables:
    -- 1. Passenger Table
    -- 2. Train Table
    -- 3. Seat Table
    -- 4. Food Table
    -- 5. Booking Table
    -- 6. Booking Food Table
    -- 7. Booking Seat Table

--Creating tables

    -- 1. Passenger Table
    CREATE TABLE passenger (
        passenger_id NUMBER PRIMARY KEY,
        passenger_name VARCHAR2(100) NOT NULL,
        passenger_age NUMBER NOT NULL
    );

    -- 2. Train Table
    CREATE TABLE train (
        train_id NUMBER PRIMARY KEY,
        train_name VARCHAR2(100) NOT NULL,
        route VARCHAR2(255) NOT NULL
    );

    -- 3. Seat Table
    CREATE TABLE train_seat (
        seat_id NUMBER PRIMARY KEY,
        seat_number VARCHAR2(10) NOT NULL,
        class VARCHAR2(50) NOT NULL,
        seat_price NUMBER NOT NULL
    );

    -- 4. Food Table
    CREATE TABLE train_food (
        item_id NUMBER PRIMARY KEY,
        item_name VARCHAR2(100) NOT NULL,
        price NUMBER NOT NULL
    );

    -- 5. Booking Table
    CREATE TABLE train_booking (
        booking_id NUMBER PRIMARY KEY,
        booking_number VARCHAR2(20) NOT NULL,
        journey_date DATE NOT NULL,
        train_id NUMBER NOT NULL,
        passenger_id NUMBER NOT NULL,
        number_of_tickets NUMBER NOT NULL,
        ticket_amount NUMBER NOT NULL,
        food_amount NUMBER NOT NULL,
        total_amount NUMBER NOT NULL,
        payment_mode VARCHAR2(50) NOT NULL,
        FOREIGN KEY (train_id) REFERENCES train(train_id),
        FOREIGN KEY (passenger_id) REFERENCES passenger(passenger_id)
    );

    -- 6. Booking Food Table
    CREATE TABLE train_booking_food (
        booking_id NUMBER NOT NULL,
        item_id NUMBER NOT NULL,
        quantity NUMBER NOT NULL,
        amount NUMBER NOT NULL,
        PRIMARY KEY (booking_id, item_id),
        FOREIGN KEY (booking_id) REFERENCES train_booking(booking_id),
        FOREIGN KEY (item_id) REFERENCES train_food(item_id)
    );

    -- 7. Booking Seat Table
    CREATE TABLE train_booking_seat (
        booking_id NUMBER NOT NULL,
        seat_id NUMBER NOT NULL,
        price NUMBER NOT NULL,
        PRIMARY KEY (booking_id, seat_id),
        FOREIGN KEY (booking_id) REFERENCES train_booking(booking_id),
        FOREIGN KEY (seat_id) REFERENCES train_seat(seat_id)
    );



--Inserting Data to tables:
    -- 1. Passenger Table
        INSERT INTO passenger VALUES (1, 'Maheswaran', 40);
        INSERT INTO passenger VALUES (2, 'Josh', 60);
        INSERT INTO passenger VALUES (3, 'Dhaheen', 80);
        INSERT INTO passenger VALUES (4, 'Pitchumani', 55);
        INSERT INTO passenger VALUES (5, 'Bhagya', 95);
        INSERT INTO passenger VALUES (6, 'Nayana', 82);

    -- 2. Train Table
        INSERT INTO train VALUES (1, 'Rockfort Exp', 'Chennai-Trichy');
        INSERT INTO train VALUES (2, 'Pandian Exp', 'Chennai-Madurai');
        INSERT INTO train VALUES (3, 'Mangalore Exp', 'Chennai-Mangalore');

    -- 3. Seat Table
        INSERT INTO train_seat VALUES (1, 'S1-01', 'Sleeper', 500);
        INSERT INTO train_seat VALUES (2, 'S1-02', 'Sleeper', 500);
        INSERT INTO train_seat VALUES (3, 'S1-03', 'Sleeper', 500);
        INSERT INTO train_seat VALUES (4, 'A1-01', 'AC', 1000);
        INSERT INTO train_seat VALUES (5, 'A1-02', 'AC', 1000);
        INSERT INTO train_seat VALUES (6, 'A1-03', 'AC', 1000);
        INSERT INTO train_seat VALUES (7, 'S2-01', 'Sleeper', 500);
        INSERT INTO train_seat VALUES (8, 'S2-02', 'Sleeper', 500);
        INSERT INTO train_seat VALUES (9, 'S2-03', 'Sleeper', 500);


    -- 4. Food Table
        INSERT INTO train_food VALUES (1, 'Samosa', 60);
        INSERT INTO train_food VALUES (2, 'Coffee', 40);
        INSERT INTO train_food VALUES (3, 'Popcorn', 100);
        INSERT INTO train_food VALUES (4, 'Veg Meal', 150);
        INSERT INTO train_food VALUES (5, 'Non-Veg Meal', 200);

    -- 5. Booking Table
        INSERT INTO train_booking VALUES (1, 'B001', TO_DATE('2024-11-18', 'YYYY-MM-DD'), 1, 1, 3, 1500, 300, 1800, 'UPI');
        INSERT INTO train_booking VALUES (2, 'B002', TO_DATE('2024-11-18', 'YYYY-MM-DD'), 2, 2, 2, 2000, 300, 2300, 'Card');
        INSERT INTO train_booking VALUES (3, 'B003', TO_DATE('2024-11-18', 'YYYY-MM-DD'), 3, 3, 1, 1000, 200, 1200, 'Cash');
        INSERT INTO train_booking VALUES (4, 'B004', TO_DATE('2024-11-19', 'YYYY-MM-DD'), 1, 4, 1, 500, 100, 600, 'UPI');
        INSERT INTO train_booking VALUES (5, 'B005', TO_DATE('2024-11-19', 'YYYY-MM-DD'), 2, 5, 2, 2000, 400, 2400, 'UPI');
        INSERT INTO train_booking VALUES (6, 'B006', TO_DATE('2024-11-19', 'YYYY-MM-DD'), 3, 6, 1, 1000, 200, 1200, 'Card');

    -- 6. Booking Food Table
        INSERT INTO train_booking_seat VALUES (1, 1, 500);
        INSERT INTO train_booking_seat VALUES (1, 2, 500);
        INSERT INTO train_booking_seat VALUES (1, 3, 500);
        INSERT INTO train_booking_seat VALUES (2, 4, 1000);
        INSERT INTO train_booking_seat VALUES (2, 5, 1000);
        INSERT INTO train_booking_seat VALUES (3, 6, 1000);

    -- 7. Booking Seat Table
        INSERT INTO train_booking_food VALUES (1, 1, 2, 120);
        INSERT INTO train_booking_food VALUES (1, 2, 2, 80);
        INSERT INTO train_booking_food VALUES (2, 4, 2, 300);
        INSERT INTO train_booking_food VALUES (3, 3, 2, 200);

        commit;

    --Queries

    --SUBQUERIES
    -- 1. Find the names of passengers who booked more than 2 tickets.
        SELECT passenger_name
        FROM passenger
        WHERE passenger_id IN (
            SELECT passenger_id
            FROM train_booking
            WHERE number_of_tickets > 2
        );
   
        -- 2. List all trains that have bookings with total amounts exceeding ₹2000.
        SELECT train_id, train_name
        FROM train
        WHERE train_id IN (
            SELECT train_id
            FROM train_booking
            WHERE total_amount > 2000
        );

        -- 3. Find the booking IDs where at least one AC seat was booked.
        SELECT booking_id
        FROM train_booking_seat
        WHERE seat_id IN (
            SELECT seat_id
            FROM train_seat
            WHERE class = 'AC'
        );

        -- 4. Identify the food items ordered in bookings for the train "Pandian Exp".
        SELECT item_id, item_name
        FROM train_food
        WHERE item_id IN (
            SELECT item_id
            FROM train_booking_food
            WHERE booking_id IN (
                SELECT booking_id
                FROM train_booking
                WHERE train_id = (SELECT train_id FROM train WHERE train_name = 'Pandian Exp')
            )
        );

        -- 5. Retrieve the passenger names who booked tickets for the "Sleeper" class.
        SELECT passenger_name
        FROM passenger
        WHERE passenger_id IN (
            SELECT passenger_id
            FROM train_booking
            WHERE booking_id IN (
                SELECT booking_id
                FROM train_booking_seat
                WHERE seat_id IN (
                    SELECT seat_id
                    FROM train_seat
                    WHERE class = 'Sleeper'
                )
            )
        );

        














==========================================================================


UNF:
    tickets(
        booking_id, booking_number, theatre_id, theatre_name,
        customer_id, customer_name, customer_city,
        movie_name, about_movie, number_of_tickets, tickets_amount,  food_amount, 
        ticket_plus_food_amount, payment_mode, 

        ticket1seat_number, ticket1_seat_price, 
        ticket2seat_number, ticket2_seat_price, 
        ticket3seat_number, ticket3_seat_price,
        
        food1_item_id, food1_item_name, food1_price, food1_qty, food1_amount,
        food2_item_id, food2_item_name, food2_price, food2_qty, food2_amount,
        food3_item_id, food3_item_name, food3_price, food1_qty, food3_amount,
        food4_item_id, food4_item_name, food4_price, food1_qty, food4_amount
    )
        

1NF:
    tickets(
        booking_id, booking_number, theatre_id, theatre_name,
        customer_id, customer_name, customer_city,
        movie_name, about_movie, number_of_tickets, tickets_amount,  food_amount, 
        ticket_plus_food_amount, payment_mode, 
        seat_number, seat_price, 
        food_item_id, food_item_name, food_price, food_qty
    )   PK {booking_id, seat_number, food_item_id}
            
    
2NF:
    tickets(
        booking_id, booking_number, theatre_id, 
        customer_id,
        movie_name, about_movie, number_of_tickets, tickets_amount,  food_amount, 
        ticket_plus_food_amount, payment_mode, 
        seat_number, 
        food_item_id, food_qty
    )   PK {booking_id, seat_number, food_item_id} 
        FK{food_item_id} FK{seat_number} FK{customer_id}

    foods(
        item_id, item_name, price
    )

    seats(
        seat_id, seat_number, seat_price
    )

    customers(
        customer_id, customer_name, customer_city,
    )

    theatres (
        theatre_id, theatre_name
    )
       
       // To be continued :(



