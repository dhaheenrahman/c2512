Static: (memory will be allocated in the stack)

int x = 10;
int* ptr = &x;   // & here is address of operator. ie not reference operator used as alias.
cout << ptr;    // prints adress of x
cout << *ptr    // prints value of x. Here * is dereference operator. Dereferencing a pointer means accessing the value in the variable to which pointer is pointing


Dynamic: (memory will be allocated in the heap segment)

always initialise pointer variable to avoid wild pointer

    int* ptr = new int{100};
            or
    int* ptr = nullptr

dont keep it as garbage value
ie:
    int *ptr;   // creates wild pointer

Always free memory after use to avoid memory leak/hole.

    delete ptr;

Also set ptr to nullptr to avoid dangling pointer. Because accessing memory after releasing it is illegal.
    ptr = nullptr  


Pointer arithmetics:

    int x = 5;  
    int* ptr = &x;
    cout << ptr << "\t" << (ptr + 1);   // points to next free memory address

    out : 0x7ffc6a05d9bc    0x7ffc6a05d9c0

Array: 
    array name is the pointer to first element.

    int arr[5] = {2, 3, 4, 5, 6};
    cout << "\narr : " << arr;
    cout << "\n*(arr + 0) : " << *(arr + 0);
    cout << "\n*(arr + 1) : " << *(arr + 1);
    cout << "\n*(arr + 2) : " << *(arr + 2);
    cout << "\n*(arr + 3) : " << *(arr + 3);
    cout << "\n*(arr + 4) : " << *(arr + 4);

    cout << "\narr[0] : " << arr[0];
    cout << "\narr[1] : " << arr[1];
    cout << "\narr[2] : " << arr[2];
    cout << "\narr[3] : " << arr[3];
    cout << "\narr[4] : " << arr[4];

    cout << "\n(arr + 0) : " << (arr + 0);
    cout << "\n(arr + 1) : " << (arr + 1);
    cout << "\n(arr + 2) : " << (arr + 2);
    cout << "\n(arr + 3) : " << (arr + 3);
    cout << "\n(arr + 4) : " << (arr + 4);


    cout << "\n*(arr + 0) : " << *(arr + 0);
    cout << "\narr[0] : " << arr[0];
    cout << "\n*(0 + arr) : " << *(0 + arr);
    cout << "\n0[arr] : " << 0[arr];

    Output:

    arr : 0x7fff0ba43220
    *(arr + 0) : 2
    *(arr + 1) : 3
    *(arr + 2) : 4
    *(arr + 3) : 5
    *(arr + 4) : 6

    arr[0] : 2
    arr[1] : 3
    arr[2] : 4
    arr[3] : 5
    arr[4] : 6

    (arr + 0) : 0x7fff0ba43220
    (arr + 1) : 0x7fff0ba43224
    (arr + 2) : 0x7fff0ba43228
    (arr + 3) : 0x7fff0ba4322c
    (arr + 4) : 0x7fff0ba43230
    
    *(arr + 0) : 2
    arr[0] : 2
    *(0 + arr) : 2
    0[arr] : 2




    


