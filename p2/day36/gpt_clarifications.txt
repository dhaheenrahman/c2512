In network programming using the socket API, several steps occur when a server accepts a connection request from a client. Let’s break down these steps and explain the purpose of accept(), the creation of a new socket, and how the client’s address is handled.
1. The Role of accept()

The accept() function is used by a server to accept incoming connection requests from clients. Its signature is typically:

int accept(int server_sockfd, struct sockaddr *client_address, socklen_t *address_len);

    server_sockfd: The server's socket file descriptor that is listening for connections (created using socket() and bound to a specific address and port).
    client_address: A pointer to a sockaddr structure where information about the connecting client (IP and port) will be stored.
    address_len: A pointer to a variable that holds the size of the client_address structure.

How It Works

    The server calls listen() to wait for incoming connections.
    When a client connects, accept() creates a new socket for the connection.
    This new socket (a unique sockfd) is used to communicate with the specific client, allowing multiple clients to connect to the same server simultaneously.
    The accept() function returns the new sockfd on success, or -1 on error.

2. Why a New Socket (new_socket) is Used

The original server_sockfd is used only to listen for incoming connections. Each call to accept() creates a separate new socket (returned by accept()) that is used exclusively for communication with one specific client.

    Reason for a New Socket:
    The server can continue listening for new connections on server_sockfd while interacting with a connected client using the new_socket. This allows handling multiple clients concurrently (potentially in different threads or processes).

3. How the Client’s Address is Obtained

The accept() function fills in the client_address structure with the connecting client's IP address and port. This information is useful if:

    You want to log or display the client’s address.
    You need to respond to the client (though usually, the server sends responses using send() on the new socket returned by accept(), not directly using the client_address).

Example of extracting and printing client information:

struct sockaddr_in client_address;
socklen_t addr_len = sizeof(client_address);
int new_socket = accept(server_sockfd, (struct sockaddr*)&client_address, &addr_len);

char client_ip[INET_ADDRSTRLEN];
inet_ntop(AF_INET, &client_address.sin_addr, client_ip, INET_ADDRSTRLEN);
int client_port = ntohs(client_address.sin_port);
std::cout << "Connection from " << client_ip << ":" << client_port << std::endl;

4. Why the Client Doesn’t Bind to an Address

The client usually does not explicitly bind its socket to an address before connecting. This is because:

    Automatic Binding:
    When the client calls connect(), the OS automatically selects an available ephemeral (temporary) port and binds the socket to it. The client does not need to manage this process manually unless specific requirements dictate otherwise (e.g., binding to a specific network interface).

    Purpose of Binding on the Server:
    The server binds to a well-known port and address so clients know where to connect. Binding is necessary for servers to listen for incoming connections on a fixed endpoint.

Summary

    accept() creates a new socket for each client connection, allowing the server to handle multiple clients while keeping the original listening socket free for new requests.
    The client’s address is automatically filled into the sockaddr structure passed to accept(), though responses are typically sent via the new socket descriptor.
    Clients do not need to bind manually because connect() handles it automatically, choosing an ephemeral port for the client-side connection.

This design keeps the server flexible and scalable while simplifying the client’s connection logic.